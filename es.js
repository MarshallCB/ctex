class t{constructor(e,s,i){let r=function(t,e,s=!1){Object.defineProperty(this,t,s?e:{value:e})}.bind(this);r("init",e[0].bind(this)),r("r",Symbol()),r("_isCtex",!0),r("s",{}),r(Symbol.iterator,{*a(){yield*e[2],yield*e[3]}}.a);let n=this.values.bind(this);e[1].forEach(t=>{r(t,{set(e){Promise.resolve(s[t](e))},get:()=>s[t],enumerable:!0},!0)}),e[2].forEach(t=>{let{get:e,set:o}=Object.getOwnPropertyDescriptor(s,t);r("_$"+t,{writable:!0},!0),r(t,e?{get:e}:{set(e){this["_$"+t]=o?o(e):e,this.s[t]&&this.s[t].forEach(t=>Promise.resolve(t(e))),this.s[this.r]&&this.s[this.r].forEach(t=>Promise.resolve(t(n())))},get(){return this["_$"+t]},enumerable:!0},!0),e||(this[t]=i[t]||s[t])}),e[3].forEach(e=>{this[e]=s[e],this[e]instanceof t?this[e].set(i[e]||{}):this[e]=this[e](i[e]||{})}),Object.seal(this),this.init()}subscribe(t,e){let s=Symbol();return"function"==typeof t&&(e=t,t=this.r),this.s[t]||(this.s[t]=new Map),this.s[t].set(s,e),()=>this.s[t].delete(s)}set(t){for(let[e,s]of Object.entries(t))void 0!==this[e]&&(this[e]&&this[e]._isCtex?this[e].set(s):this[e]=s)}values(){let t={};for(var e of this)t[e]=this[e]&&this[e]._isCtex?this[e].values():this[e];return t}}function e(e){let{init:s,...i}=e,r=function(t){let e=[[],[],[]];return Object.getOwnPropertyNames(t).forEach(s=>{"init"!==s&&e["function"==typeof t[s]?0:t[s]&&t[s]._isCtex?2:1].push(s)}),e}(i),n=(i={})=>new t([s||(()=>{}),...r],e,i);return n._isCtex=!0,n}function s(t,e,i="/",r=""){var n,o=r?r+i:r;if(null!=t)if(t._isCtex)for(n of(e(r,t),t))s(t[n],e,i,o+n);else if(Array.isArray(t))for(n=0;n<t.length;n++)s(t[n],e,i,o+n);else if("object"==typeof t)for(n in t)s(t[n],e,i,o+n)}function i(t,e){let s=e.split("/").filter(t=>t.length),i=t,r=s.pop();for(let t of s)i=i[t];return[i,r]}function r(t){let r=e(t)();function n(t){let[e,s]=i(r,t);return e[s]}return n.get=function(t){let[e,s]=i(r,t),n=e[s];return n&&n._isCtex?n.values():n},n.post=function(t,e){let[s,n]=i(r,segments);s[n](e)},n.save=function(t){let e=(e,s)=>s.subscribe(s=>t(e,s));return e("index",r),s(r,e),n},n.load=function(t){let e=(e,s)=>{Promise.resolve(t(e)).then(t=>r.set(t)).catch(t=>console.log(t))};return e("index"),s(r,e),n},n}export{e as Context,r as Network};
