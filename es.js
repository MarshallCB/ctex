function e(t,i=(()=>{}),s="/",r="",n={}){var o,l=r?r+s:r;if(t&&t._isCtex)for(o of(i(r,t),t))e(t[o],i,s,l+o,n);else if(Array.isArray(t))for(o=0;o<t.length;o++)e(t[o],i,s,l+o,n);else if(t&&"object"==typeof t)for(o in t)e(t[o],i,s,l+o,n);else!function(e,t,i){t=t.split("/");for(var s,r=0,n=t.length,o=e;r<n;++r)s=o[t[r]],o=o[t[r]]=r===n-1?i:null!=s?s:!~t[r+1].indexOf(".")&&+t[r+1]>-1?[]:{}}(n,r,t);return n}function t(e,t,i,s){t=t.split("/");let r=e;for(i=0;i<t.length;i++)r=r?r[t[i]]:s;return r}class i{constructor(t,s,r){let n=function(e,t,i=!1){Object.defineProperty(this,e,i?t:{value:t})}.bind(this);n("_isCtex",!0),n("s",{}),n(Symbol.iterator,{*a(){yield*t[2],yield*t[3]}}.a),t[1].map(e=>{n(e,{set(t){Promise.resolve(s[e](t))},get:()=>s[e],enumerable:!0},!0)}),t[2].map(t=>{let{get:i,set:o}=Object.getOwnPropertyDescriptor(s,t);n("_$"+t,{writable:!0},!0),n(t,i?{get:i}:{set(i){if(i=o?o(i):i,this["_$"+t]!==i){this["_$"+t]=i;let s=this.s;if(s[t])for(let e of s[t])Promise.resolve(e(i));if(s[""]){let t=e(this);for(let e of s[""])Promise.resolve(e(t))}}},get(){return this["_$"+t]},enumerable:!0},!0),i||(this[t]=r[t]||s[t])}),t[3].map(e=>{n(e,{set(t={}){this[e]instanceof i?this[e].set(t):this[e]=s[e](t)},enumerable:!0},!0),this[e]=r[e]}),Object.seal(this),t[0].bind(this)()}subscribe(e,t,i=Symbol()){if(void 0!==this[e])return t||(t=e,e=""),t=t.bind(this),this[e]&&this[e]._isCtex?this[e].subscribe(t):(this.s[e]=this.s[e]||new Set,this.s[e].add(t),()=>this.s[e].delete(t))}set(e={},t=!0){Object.assign(this,e)}values(){return e(this)}}function s(e){let t=t=>function(e,t={}){return new i(function(e,t){let i=[()=>{},[],[],[]];return Object.getOwnPropertyNames(e).forEach(s=>{t=e[s],"init"!==s?i["function"==typeof t?1:t&&t._isCtex?3:2].push(s):i[0]=t}),i}(e),e,t)}(e,t);return t._isCtex=!0,t}function r(i){let r=s(i)();function n(e){return t(r,e)}return n.get=function(e){let i=t(r,e);return i&&i._isCtex?i.values():i},n.post=function(e,i){return t(r,e)(i)},n.save=function(t){let i=(e,i)=>i.subscribe(i=>t(e,i));return i("index",r),e(r,i),n},n.load=function(t){let i=(e,i)=>{Promise.resolve(t(e)).then(e=>r.set(e)).catch(e=>console.log(e))};return i("index"),e(r,i),n},n}export{s as Model,r as Network};
