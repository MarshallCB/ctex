function e(t,n=(()=>{}),r="/",i="",s={}){var o,l=i?i+r:i;if(t&&t._isCtex)for(o of(n(i,t),t))e(t[o],n,r,l+o,s);else if(Array.isArray(t))for(o=0;o<t.length;o++)e(t[o],n,r,l+o,s);else if(t&&"object"==typeof t)for(o in t)e(t[o],n,r,l+o,s);else!function(e,t,n){t=t.split("/");for(var r,i=0,s=t.length,o=e;i<s;++i)r=o[t[i]],o=o[t[i]]=i===s-1?n:null!=r?r:!~t[i+1].indexOf(".")&&+t[i+1]>-1?[]:{}}(s,i,t);return s}function t(e,t,n,r){t=t.split("/");let i=e;for(n=0;n<t.length;n++)i=i?i[t[n]]:r;return i}function n(t){let n=n=>new(function(t,n={}){function l(){}const{prototype:u}=l;function f(e,t,n=!1){r(u,e,n?t:{value:t})}let c=function(e,t){let n=[()=>{},[],[],[]];return Object.getOwnPropertyNames(e).forEach(r=>{t=e[r],"init"!==r?n["function"==typeof t?1:t&&t._isCtex?3:2].push(r):n[0]=t}),n}(t);return f("s",{}),f(Symbol.iterator,{*a(){yield*c[2],yield*c[3]}}.a),c[1].map(e=>{f(e,{set(n){Promise.resolve(t[e](n))},get:()=>t[e],enumerable:!0},!0)}),c[2].map(r=>{let{get:s,set:o}=i(t,r);f("_$"+r,{writable:!0},!0),f(r,s?{get:s}:{set(t){if(t=o?o(t):t,u["_$"+r]!==t){u["_$"+r]=t;let n=u.s;if(n[r])for(let e of n[r])Promise.resolve(e(t));if(n[""]){let t=e(u);for(let e of n[""])Promise.resolve(e(t))}}},get:()=>u["_$"+r],enumerable:!0},!0),s||(u[r]=n[r]||t[r])}),c[3].map(e=>{f(e,{set(n={}){u[e]instanceof l?u[e].set(n):u[e]=t[e](n)},enumerable:!0},!0),u[e]=n[e]}),o(u,{subscribe(e,t,n=Symbol()){if(void 0!==this[e])return t||(t=e,e=""),t=t.bind(this),this[e]&&this[e]._isCtex?this[e].subscribe(t):(this.s[e]=this.s[e]||new Set,this.s[e].add(t),()=>this.s[e].delete(t))},set(e={},t=!0){o(this,e)},values(){return e(this)}}),f("constructor",l),f("_isCtex",!0),s(u),c[0].bind(u)(),l}(t,n));return n._isCtex=!0,n}let{defineProperty:r,getOwnPropertyDescriptor:i,seal:s,assign:o}=Object;function l(r){let i=n(r)();function s(e){return t(i,e)}return s.get=function(e){let n=t(i,e);return n&&n._isCtex?n.values():n},s.post=function(e,n){return t(i,e)(n)},s.save=function(t){let n=(e,n)=>n.subscribe(n=>t(e,n));return n("index",i),e(i,n),s},s.load=function(t){let n=(e,n)=>{Promise.resolve(t(e)).then(e=>i.set(e)).catch(e=>console.log(e))};return n("index"),e(i,n),s},s}export{n as Model,l as Network};
